from typing import Tuple, Optional
from replit import db
import logging
import base64
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
from db_script import GRADE, STATUSES


def get_text_for_diploma(full_name: str, grade: str, gender: str, school: str,
                         city: str, status: str):
  second_name, first_name, _ = full_name.split()
  strings = ("–Ω–∞–≥—Ä–∞–∂–¥–∞–µ—Ç—Å—è", f"—É—á–µ–Ω–∏{gender} {grade} –∫–ª–∞—Å—Å–∞", f"{school}",
             f"({city})", f"{second_name} {first_name}",
             f"–∑–∞ {STATUSES[status]['awarded_for']}",
             f"–≤ {GRADE[grade]['division_rus']} –≥—Ä—É–ø–ø–µ –æ–ª–∏–º–ø–∏–∞–¥—ã",
             f"for success in {GRADE[grade]['division_en']} division",
             f"–°—Ç–∞—Ä—à–∏–π –ø–æ –ø–∞—Ä–∞–ª–ª–µ–ª–∏ {grade} –∫–ª–∞—Å—Å–∞",
             f"{GRADE[grade]['master_name']}")
  return strings


def find_diploma(
    last_name_or_whole_input: str,
    first_name: str = '',
    middle_name: str = '') -> Tuple[str, int, Optional[str], Optional[str]]:
  '''Funcion searches for information about student in database.
    Middle name considered to be empty string if not provided.
    It returns tuple with message, number of matches and status of student if it's unique. 
    Status is str from db['statuses']. 
    If student does't exist in db or is not unique status is None.
    '''
  #TODO1: –¥–æ–ø–∏—Å–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∏–ø–ª–æ–º–∞ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ä–æ–≤–Ω–æ
  #–æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (?)
  #–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∫–æ—Ä—Ç–µ–∂–µ
  #TODO2: –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ –∫–æ—Ä—Ç–µ–∂, –∞ —Å–ª–æ–≤–∞—Ä—å

  search_string = (f"{last_name_or_whole_input.lower()} "
                   f"{first_name.lower()} {middle_name.lower()}")

  logging.info(
    f"Start find_diploma function: search_string = {search_string.strip()}")
  matches = db.prefix(search_string.strip())
  logging.info(f"find_diploma function: {len(matches)} matches found")
  if len(matches) == 0:
    if '—ë' in search_string:
      new_search_string = search_string.replace('—ë', '–µ')
      res = find_diploma(last_name_or_whole_input=new_search_string)
      if res[1] == 0:
        new_message = res[
          0] + '\n \n –ê –µ—â—ë —è –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤ –∏–º–µ–Ω–∏ –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ –µ—Å—Ç—å –±—É–∫–≤–∞ √ã. –Ø –ø—Ä–æ–≤–µ—Ä–∏–ª, –Ω–µ—Ç –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –≤—Å–µ—Ö √ã –Ω–∞ –ï, –∏—Ö –Ω–µ –Ω–∞—à–ª–æ—Å—å üòî'
        res = (new_message, res[1], res[2], None)
      return res
    message = (f'–£—á–∞—Å—Ç–Ω–∏–∫ —Å –∏–º–µ–Ω–µ–º {last_name_or_whole_input.title()}'
               f' {first_name.capitalize()} {middle_name.capitalize()}'
               f' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–ò–û –µ—â—ë —Ä–∞–∑.'
               f' –ï—Å–ª–∏ –≤—ã –Ω–µ –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ –∏–º–µ–Ω–∏,'
               f' —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –ø–æ –ø–æ—á—Ç–µ ?????@??.??')
    return (message, len(matches), None, None)
  if len(matches) > 1:
    message = (f'–Ø –Ω–∞—à—ë–ª {len(matches)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ c –∏–º–µ–Ω–µ–º'
               f' {last_name_or_whole_input.title()}'
               f' {first_name.capitalize()} {middle_name.capitalize()}.'
               f' –ù–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å, –Ω–æ —è —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞—é.'
               f' –ê –ø–æ–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –§–ò–û –∏–Ω–∞—á–µ - –≤–¥—Ä—É–≥'
               f' –ø–æ–ª—É—á–∏—Ç—Å—è –Ω–∞–π—Ç–∏ –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞.')
    return (message, len(matches), None, None)
  if len(matches) == 1:
    message = (f'–£—á–∞—Å—Ç–Ω–∏–∫ —Å –∏–º–µ–Ω–µ–º {last_name_or_whole_input.title()}'
               f' {first_name.capitalize()}'
               f' {middle_name.capitalize()} –ø–æ–ª—É—á–∏–ª'
               f' {str(STATUSES[db[matches[0]]["status"]]["message"])}.'
               f' –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å'
               f' –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.')
    #TODO: –¥–æ–ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∏–ø–ª–æ–º–∞
    diploma_text = get_text_for_diploma(full_name=matches[0], **db[matches[0]])
    return (message, len(matches), db[matches[0]]["status"], diploma_text)


def get_byte_image(
  status: str,
  diploma_text: Tuple[str],
) -> bytes:
  logging.info("Start get_byte_image function.")
  imgstr = STATUSES[status]["base_picture"]
  image = Image.open(BytesIO(base64.b64decode(imgstr)))
  add_text = ImageDraw.Draw(image)
  font_small = ImageFont.truetype("arial.ttf", 25)
  font_huge = ImageFont.truetype("arial.ttf", 50)
  font_sub = ImageFont.truetype("Bahnschrift.ttf", 14)
  # w, h = add_text.textsize(msg)
  # box=(330, 850, 460, 920)
  #TODO: –Ω–∞–ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  i = 0
  for text in diploma_text:
    if i < 4:
      add_text.text(
        (354, 460 + 30 * i),
        text,
        anchor='ms',
        fill=('#000000'),
        font=font_small,
      )
    if i == 4:
      add_text.text(
        (354, 590),
        text.title(),
        anchor='ms',
        fill=('#000000'),
        font=font_huge,
      )
    if 4 < i < 8:
      add_text.text(
        (354, 620 + 30 * (i - 5)),
        text,
        anchor='ms',
        fill=('#000000'),
        font=font_small,
      )
    if i == 8:
      add_text.text(
        (68, 868),
        text,
        fill=('#000000'),
        font=font_sub,
      )
    if i == 9:
      add_text.text(
        (491, 868),
        text,
        fill=('#000000'),
        font=font_sub,
      )
    i += 1

  _, grade, _ = diploma_text[1].split()
  imgstr = GRADE[grade]['master_subscribe']
  if grade == '2':
    subscription = Image.open(BytesIO(base64.b64decode(imgstr)))
    subscription.thumbnail(size=(230, 70))
    image.paste(im=subscription, box=(330, 850))
  else:
    add_text.text(
      (300, 868),
      imgstr,
      fill=('#000000'),
      font=font_sub,
    )

  byteIO = BytesIO()
  image.save(byteIO, format='PNG')
  byteArr = byteIO.getvalue()
  return byteArr
