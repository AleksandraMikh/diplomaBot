import os
import requests
import logging
import base64
import time
from typing import Tuple, Optional
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
from telegram.ext import (CommandHandler, Updater, MessageHandler,
                          Filters)  #upm package(python-telegram-bot)
from telegram import (ReplyKeyboardMarkup,
                      TelegramError)  # upm package(python-telegram-bot)
from replit import db
from db_script import fill_the_base
import db_watch

token = os.environ['TOKEN']
updater = Updater(token=token)
URL = 'https://api.thecatapi.com/v1/images/search'

logging.basicConfig(
  # filename='example.log',
  # filemode='w',
  format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
  level=logging.DEBUG)


def wake_up(update, context):
    logging.info("Start wake_up funtion.")
    name = update.message.chat.first_name
    reply_keyboard = [["/restart"]]
    update.message.reply_text(
        text=(f'–ü—Ä–∏–≤–µ—Ç, {name}, —è –±–æ—Ç –¢–õ2—Ö2, '
              '—è —É–º–µ—é —Ä–∞–∑–¥–∞–≤–∞—Ç—å –¥–∏–ø–ª–æ–º—ã. –ï—Å–ª–∏ –≤—ã '
              '—Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–∏–ø–ª–æ–º –∑–∞ —Å–≤–æ–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞, '
              '–Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –§–ê–ú–ò–õ–ò–Æ, –ò–ú–Ø –∏ –û–¢–ß–ï–°–¢–í–û (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏).'),
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            # one_time_keyboard=True,
            resize_keyboard=True,
            input_field_placeholder="–§–ò–û —Ä–µ–±–µ–Ω–∫–∞"),
    )
  


def full_name_and_get_diploma(update, context):
  #TODO: –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ find_diploma
  #—Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏
  logging.info("Start full_name_and_get_diploma funtion.")
  chat = update.effective_chat
  text_low = update.message.text.lower()
  words = text_low.split()
  if len(words) < 2:
    logging.info(f"User {chat['username']} entered less than 2 words")
    context.bot.send_message(
      chat.id, (f"–ú—ã –Ω–µ –ø–æ–Ω—è–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ."
                f" –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —Ä–µ–±—ë–Ω–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª."
                f" –°–µ–π—á–∞—Å –≤—ã –≤–≤–µ–ª–∏ '{text_low}'."))
    return

  (diploma_message, number_of_matches,
   status,diploma_text) = find_diploma(last_name_or_whole_input=' '.join(words))

  if status:
    context.bot.send_message(text=diploma_message, chat_id=chat.id)
    byte_im = get_byte_image(last_name_or_whole_input=' '.join(words),
                             status=status,
                            diploma_text = diploma_text)
    update.message.reply_photo(photo=byte_im)
    context.bot.send_message(
      chat.id,
      "–í–æ—Ç –∏ –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –§–ò–û."
    )
    return

  if number_of_matches > 1:
    logging.info(f"User {chat['username']} got more than one match.")
    context.bot.send_message(text=diploma_message, chat_id=chat.id)
    return

  if len(words) > 3:
    context.bot.send_message(
      chat.id, (f"–ú—ã –Ω–µ –ø–æ–Ω—è–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –±–æ–ª—å—à–µ 3 —Å–ª–æ–≤."
                f" –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ —Ä–µ–±—ë–Ω–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª."
                f" –°–µ–π—á–∞—Å –≤—ã –≤–≤–µ–ª–∏ '{text_low}'. \n –ï—Å–ª–∏ –§–ò–û –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞"
                f" —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –±–æ–ª–µ–µ —á–µ–º —Ç—Ä—ë—Ö —Å–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∏—Ö"
                f" –≤ –¥—Ä—É–≥–æ–º –ø–æ—Ä—è–¥–∫–µ."))
    return

  if len(words) == 2:
    logging.info("Start searching with swaped 2 words.")
    (diploma_message, number_of_matches,
     status,diploma_text) = find_diploma(last_name_or_whole_input=words[1],
                            first_name=words[0])

  if len(words) == 3:
    logging.info("Start searching with swaped 3 words.")
    (diploma_message, number_of_matches,
     status,diploma_text) = find_diploma(last_name_or_whole_input=words[2],
                            first_name=words[0],
                            middle_name=words[1])

  if status:
    context.bot.send_message(text=diploma_message, chat_id=chat.id)
    if len(words) == 2:
      byte_im = get_byte_image(last_name_or_whole_input=words[1],
                               first_name=words[0],
                               status=status,
                              diploma_text = diploma_text)
    if len(words) == 3:
      byte_im = get_byte_image(last_name_or_whole_input=words[2],
                               first_name=words[0],
                               middle_name=words[1],
                               status=status,
                              diploma_text = diploma_text)
    update.message.reply_photo(photo=byte_im)
    context.bot.send_message(
      chat.id,
      ("–í–æ—Ç –∏ –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
       "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –§–ò–û."))
    return

  context.bot.send_message(text=diploma_message, chat_id=chat.id)


def get_text_for_diploma(full_name: str, 
                        grade: str,
                        gender: str,
                        school:str,
                        city: str,
                        status: str):
  return (full_name,
         grade,
         gender,
         school,
         city,
         status)


def find_diploma(last_name_or_whole_input: str,
                 first_name: str = '',
                 middle_name: str = '') -> Tuple[str, int, Optional[str], Optional[str]]:
  '''Funcion searches for information about student in database.
    Middle name considered to be empty string if not provided.
    It returns tuple with message, number of matches and status of student if it's unique. 
    Status is str from db['statuses']. 
    If student does't exist in db or is not unique status is None.
    '''
  #TODO1: –¥–æ–ø–∏—Å–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∏–ø–ª–æ–º–∞ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ä–æ–≤–Ω–æ
  #–æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (?)
  #–≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∫–æ—Ä—Ç–µ–∂–µ
  #TODO2: –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–µ –∫–æ—Ä—Ç–µ–∂, –∞ —Å–ª–æ–≤–∞—Ä—å

  search_string = (f"{last_name_or_whole_input.lower()} "
                   f"{first_name.lower()} {middle_name.lower()}")
                   
  logging.info(
    f"Start find_diploma function: search_string = {search_string.strip()}")
  matches = db.prefix(search_string.strip())
  logging.info(f"find_diploma function: {len(matches)} matches found")
  if len(matches) == 0:
    if '—ë' in search_string:
      new_search_string = search_string.replace('—ë', '–µ')
      res = find_diploma(last_name_or_whole_input=new_search_string)
      if res[1] == 0:
        new_message = res[
          0] + '\n \n –ê –µ—â—ë —è –∑–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤ –∏–º–µ–Ω–∏ –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ –µ—Å—Ç—å –±—É–∫–≤–∞ √ã. –Ø –ø—Ä–æ–≤–µ—Ä–∏–ª, –Ω–µ—Ç –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –≤—Å–µ—Ö √ã –Ω–∞ –ï, –∏—Ö –Ω–µ –Ω–∞—à–ª–æ—Å—å üòî'
        res = (new_message, res[1], res[2], None)
      return res
    message = (f'–£—á–∞—Å—Ç–Ω–∏–∫ —Å –∏–º–µ–Ω–µ–º {last_name_or_whole_input.title()}'
               f' {first_name.capitalize()} {middle_name.capitalize()}'
               f' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –§–ò–û –µ—â—ë —Ä–∞–∑.'
               f' –ï—Å–ª–∏ –≤—ã –Ω–µ –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ –∏–º–µ–Ω–∏,'
               f' —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –ø–æ –ø–æ—á—Ç–µ ?????@??.??')
    return (message, len(matches), None, None)
  if len(matches) > 1:
    message = (f'–Ø –Ω–∞—à—ë–ª {len(matches)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ c –∏–º–µ–Ω–µ–º'
               f' {last_name_or_whole_input.title()}'
               f' {first_name.capitalize()} {middle_name.capitalize()}.'
               f' –ù–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å, –Ω–æ —è —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞—é.'
               f' –ê –ø–æ–∫–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –§–ò–û –∏–Ω–∞—á–µ - –≤–¥—Ä—É–≥'
               f' –ø–æ–ª—É—á–∏—Ç—Å—è –Ω–∞–π—Ç–∏ –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ–≥–æ —Ä–µ–±—ë–Ω–∫–∞.')
    return (message, len(matches), None, None)
  if len(matches) == 1:
    message = (f'–£—á–∞—Å—Ç–Ω–∏–∫ —Å –∏–º–µ–Ω–µ–º {last_name_or_whole_input.title()}'
               f' {first_name.capitalize()}'
               f' {middle_name.capitalize()} –ø–æ–ª—É—á–∏–ª'
               f' {str(db["statuses"][db[matches[0]]["status"]]["message"])}.'
               f' –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å'
               f' –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.')
    #TODO: –¥–æ–ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∏–ø–ª–æ–º–∞
    diploma_text = get_text_for_diploma(full_name = matches[0], 
                                        **db[matches[0]]
                                       )
    return (message, len(matches), db[matches[0]]["status"], diploma_text)


def get_byte_image(last_name_or_whole_input: str,
                   status: str,
                   diploma_text: Tuple[str],
                   first_name: str = '',
                   middle_name: str = '') -> bytes:
  logging.info("Start get_byte_image function.")
  imgstr = db["statuses"][status]["base_picture"]
  image = Image.open(BytesIO(base64.b64decode(imgstr)))
  add_text = ImageDraw.Draw(image)
  font = ImageFont.truetype("arial.ttf", 30)
  msg = (f"It's me {last_name_or_whole_input.title()}"
         f" {first_name.capitalize()} {middle_name.capitalize()}!")
  # w, h = add_text.textsize(msg)
  # box = (100, 100, 500, 150)
  #TODO: –Ω–∞–ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  add_text.text(
    (100, 100),
    msg,
    fill=('#000000'),
    font=font,
  )
  i = 0
  for text in diploma_text:
    add_text.text(
      (100, 120 + 20*i),
      text,
      fill=('#000000'),
      font=font,
    )
    i+=1
  byteIO = BytesIO()
  image.save(byteIO, format='PNG')
  byteArr = byteIO.getvalue()
  return byteArr


def error_handler(update, context):
  logging.error(context.error)


def main():

  start_handler = CommandHandler("start", wake_up)
  full_name_handler = MessageHandler(filters=Filters.text,
                                     callback=full_name_and_get_diploma)

  updater.dispatcher.add_handler(start_handler)
  updater.dispatcher.add_handler(full_name_handler)
  updater.dispatcher.add_error_handler(error_handler)

  updater.start_polling()
  updater.idle()


if __name__ == "__main__":
  # fill_the_base()
  # db_watch.watch_the_base()
  main()
